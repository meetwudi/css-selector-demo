extends layout


block content
  div.container
    article
      h1 30种CSS选择器用法实战
      p 
        :markdown
          请使用modern browsers。选择器兼容性问题请到[caniuse](http://caniuse.com/)查询。
      section#part-1
        h2 星号通配符
        div.markdown
          :markdown
            星号通配符将匹配当前节点上的所有元素。比如，单独的一个星号`*`将匹配页面上所有的元素，
            而`#id-sel *`将匹配`$('#id-sel')`下的所有节点。
            举个例子，以下代码：
            ```
            #div-1 * {
              background-color: #01FF70;
            }
            ```
            将产生下面的效果：
        div.demo#demo-1
          div.wrapper#div-1 #div-1
            span span
            span span
            a a
        div.markdown
          :markdown
            若改成以下代码：
            ```
            #div-1 * {
              background-color: yellow;
            }
            ```
            将把所有`div-1`当中的元素背景颜色更改为黄色。效果如下：
        div.demo#demo-2
          div#div-1 #div-1
            span span
            span span
            a a
        div.markdown
          :markdown

      section#part-2
        h2 #X
        div.markdown
          :markdown
            `#X`用于匹配id属性为X的元素，这样的元素在一个页面有且只有一个。举个例子，以下代码：
            ```
            #div-2 { background-color: green }
            #span-1 { background-color: red }
            #span-2 { background-color: blue }
            ```
            将产生以下效果
        div.demo#demo-1
          div#div-2 #div-2
            span#span-1 #span-1
            span#span-2 #span-2
        div.markdown
          :markdown
            切记：`id`属性不能随意使用，容易造成滥用，应该尽量使用tag名或者class来匹配元素。  

      section#part-3
        h2 .X
        div.markdown
          :markdown
            `.X`用于匹配class属性为含有X的元素，称作类选择器。举个例子，以下代码：
            ```
            #div-3 { background-color: green }
            .span-1 { background-color: red }
            .span-2 { background-color: blue }
            ```
            将产生以下效果
        div.demo#demo-1
          div#div-3 #div-3
            span.span-1 .span-1
            span.span-2 .span-2

      section#part-4
        h2 X Y
        div.markdown
          :markdown
            `X Y`形式的选择器是后继选择器，表示匹配DOM结构上是`$(X)`子孙节点的并符合
            选择器Y的节点（即`$(X).children(Y)`）。示例代码如下：
            ```
            #div-4 {
              background-color: green;
              .wu-huang-wan-sui { background-color: skyblue; }
            }
            ```
            效果如下：
        div.demo#demo-1
          div#div-4 #div-4
            span.wu-huang-wan-sui .wu-huang-wan-sui
        div.markdown
          :markdown
            注意：如果你的代码出现诸如`X Y Z A B.error`的代码，那么一定是你命名或者代码组织上出了问题。尽量缩短你的选择器。

      section#part-5
        h2 X
        div.markdown
          :markdown
            单独的一个`X`代表着匹配标签名为X的所有DOM节点。比如`div {}`就表示匹配所有的`div`元素。 示例代码如下：
            ```
            #div-5 {
              span { border: 2px solid blue; }
            }
            ```
            其效果如下：
        div.demo#demo-1
          div#div-5 #div-5
            span 我
            span 是 
            span Web
            span 攻城
            span 狮

      section#part-6
        h2 X:visited和X:link
        div.markdown  
          :markdown
            `X:link`是一个伪类选择器，它将匹配页面上所有未被点击的链接。相反，`X:visited`匹配页面上所有曾经被点击过的链接。
            这里的链接指的是`a`标签。示例代码如下：
            ```
            #div-6 {
              a:link { color: red }
              a:visited { color: purple; }
            }
            ```
            效果如下：
        div.demo#demo-1
          div#div-6
            a(href="http://css-selector-demo-app.herokuapp.com/") 这是一个链接

      section#part-7
        h2 X + Y
        div.markdown
          :markdown
            `X + Y`是相邻选择器，表示匹配`$(Y)`，这个`$(Y)`节点必须是`$(X)`同级的直接后继节点。具体点说，即在DOM树中应该
            满足如下结构：
            ```
            <div>
              ... 
              <X'> 匹配X的节点X' </X'>
              <Y'> 匹配Y的节点Y' </Y'>
              ...
            </div>
            ```
            而如下结构均无法正确匹配：
            ```
            <div>
              ... 
              <Y'> 匹配Y的节点Y' </Y'>
              <X'> 匹配X的节点X' </X'>
              ...
            </div>
            ```
            或者
            ```
            <div>
              ... 
              <X'> 匹配X的节点X' </X'>
              ...
              <Y'> 匹配Y的节点Y' </Y'>
              ...
            </div>
            ```
            或者
            ```
            <div>
              ... 
              <Y'> 匹配Y的节点Y' </Y'>
              ...
              <X'> 匹配X的节点X' </X'>
              ...
            </div>
            ```
            示例代码如下：
            ```
              div#div-7 {
                p.foo + p.bar {
                  font-size: 20px;
                }
              }
            ```
            效果如下：
        div.demo#demo-1
          div#div-7 div-7
            p.bar p.bar
            p.foo p.foo 
            p.bar p.bar
            p.bar p.bar
            p.foo p.foo

      section#part-8
        h2 X > Y
        div.markdown
          :markdown
            `X > Y`为直接后继选择器，与`X Y`不同的是，`X > Y`只选择`$(X)`在DOM树中的直接子节点。比如在下面的
            DOM树中：
            ```
            <div class="container">
               <ul id="list-a">
                  <li> List Item A  
                    <ul id="list-b">
                       <li> Child A </li>
                    </ul>
                  </li>
                  <li> List Item B</li> 
                  <li> List Item C</li>
                  <li> List Item D</li>
               </ul>
            </div>
            ```
            文字为`List Item A`的`li`是id为`list-a`的`ul`的直接子节点，而文字为`Child A`的`li`则不是，它
            应该算是id为`list-a`的`ul`的三级子节点（深度为3的子孙）。  
            除此之外，`X > Y`和'X Y'是一样的。这里就略去示例代码。